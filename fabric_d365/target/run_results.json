{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-06-24T01:11:28.868098Z", "invocation_id": "450bd5a5-87bb-4b1c-9598-639de40d445b", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2024-06-24T01:11:28.785158Z", "completed_at": "2024-06-24T01:11:28.844825Z"}, {"name": "execute", "started_at": "2024-06-24T01:11:28.846159Z", "completed_at": "2024-06-24T01:11:28.849055Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07152390480041504, "adapter_response": {}, "message": "Runtime Error in model int_dim_d365_company (models\\stage\\python\\int_dim_d365_company.py)\n  Materialization \"materialization_table_fabric\" only supports languages ['sql']; got \"python\"", "failures": null, "unique_id": "model.fabric_d365.int_dim_d365_company", "compiled": true, "compiled_code": "import pyspark.sql.functions as F\r\nfrom pyspark.sql.functions import concat_ws, concat, lit\r\nfrom pyspark.sql.types import *\r\nfrom graphframes import GraphFrame\r\nfrom graphframes.lib import Pregel\r\n\r\nvertColSchema = StructType()\\\r\n      .add(\"dist\", DoubleType())\\\r\n      .add(\"node\", StringType())\\\r\n      .add(\"path\", ArrayType(StringType(), True))\r\n\r\ndef vertexProgram(vd, msg):\r\n    if msg == None or vd.__getitem__(0) < msg.__getitem__(0):\r\n        return (vd.__getitem__(0), vd.__getitem__(1), vd.__getitem__(2))\r\n    else:\r\n        return (msg.__getitem__(0), vd.__getitem__(1), msg.__getitem__(2))\r\nvertexProgramUdf = F.udf(vertexProgram, vertColSchema)\r\n\r\ndef sendMsgToDst(src, dst):\r\n    srcDist = src.__getitem__(0)\r\n    dstDist = dst.__getitem__(0)\r\n    if srcDist < (dstDist - 1):\r\n        return (srcDist + 1, src.__getitem__(1), src.__getitem__(2) + [dst.__getitem__(1)])\r\n    else:\r\n        return None\r\nsendMsgToDstUdf = F.udf(sendMsgToDst, vertColSchema)\r\n\r\ndef aggMsgs(agg):\r\n    shortest_dist = sorted(agg, key=lambda tup: tup[1])[0]\r\n    return (shortest_dist.__getitem__(0), shortest_dist.__getitem__(1), shortest_dist.__getitem__(2))\r\naggMsgsUdf = F.udf(aggMsgs, vertColSchema)\r\n\r\ndef model(dbt, session):\r\n    dbt.config(\r\n        materialized = \"table\",\r\n        packages = [\"graphframes\"],\r\n        pre_hook=['SET setCheckpointDir=Files/checkpoints']\r\n    )\r\n    df_companyinfo = dbt.source('dbo', 'companyinfo')\r\n    df_dirpartytable = dbt.source('dbo', 'dirpartytable')\r\n    df_omhierarchyrelationship = dbt.source('dbo', 'omhierarchyrelationship')\r\n    df_omhierarchytype = dbt.source('dbo', 'omhierarchytype')\r\n\r\n    # Perform the joins\r\n    df = df_companyinfo.alias('ch') \\\r\n        .join(df_dirpartytable.alias('chprty'), F.col('ch.recid') == F.col('chprty.recid'), 'left') \\\r\n        .join(df_omhierarchyrelationship.alias('h'), (F.col('h.childorganization') == F.col('ch.recid')) & (F.col('h.hierarchytype') == 5637145327), 'left') \\\r\n        .join(df_companyinfo.alias('parentc'), F.col('h.parentorganization') == F.col('parentc.recid'), 'left') \\\r\n        .join(df_dirpartytable.alias('pprty'), F.col('parentc.recid') == F.col('pprty.recid'), 'left') \\\r\n        .join(df_omhierarchytype.alias('ht'), F.col('h.hierarchytype') == F.col('ht.recid'), 'left') \\\r\n        .where(F.col('ch.IsDelete').isNull())\r\n    \r\n    # Select the columns\r\n    df_ctco = df.select(\r\n        F.col('ch.recid').alias('company_recid'),\r\n        F.coalesce(F.col('h.childorganization'), F.lit('0')).alias('childorganization'),\r\n        F.col('chprty.recid').alias('party_recId'),\r\n        F.concat(F.upper(F.col('ch.dataarea')), F.lit(' - '), F.coalesce(F.col('chprty.name'), F.lit(''))).alias('company'),\r\n        F.coalesce(F.col('chprty.name'), F.lit('')).alias('company_name'),\r\n        F.upper(F.col('ch.dataarea')).alias('company_dataarea'),\r\n        F.coalesce(F.col('pprty.name'), F.lit('')).alias('parent_company_name'),\r\n        F.upper(F.col('parentc.dataarea')).alias('parent_co_dataarea'),\r\n        F.col('ch.coregnum'),\r\n        F.col('ch.bank'),\r\n        F.col('h.parentorganization'),\r\n        F.col('h.hierarchytype'),\r\n        F.col('ht.name').alias('hierarchytypename'),\r\n        F.col('ch.IsDelete')\r\n    )\r\n\r\n    vertices = df_ctco.select(\"parent_company_name\").withColumnRenamed(\"parent_company_name\", \"node\").union(df_ctco.select(\"company_name\")).distinct().withColumn(\"id\", F.monotonically_increasing_id()).cache()\r\n\r\n    edges = df_ctco.join(vertices, df_ctco.parent_company_name == vertices.node).drop(F.col(\"node\")).withColumnRenamed(\"id\", \"src\")\\\r\n            .join(vertices, df_ctco.company_name== vertices.node).drop(F.col(\"node\")).withColumnRenamed(\"id\", \"dst\").cache() \r\n    \r\n    graph = GraphFrame(vertices, edges)\r\n\r\n    result = graph.pregel.withVertexColumn(colName = \"vertCol\", \\\r\n    initialExpr = F.when(F.col(\"node\")==F.lit(\"Sanford Group (Consolidated)\"), F.struct(F.lit(0.0), F.col(\"node\"), F.array(F.col(\"node\")))) \\\r\n    .otherwise(F.struct(F.lit(float(\"inf\")), F.col(\"node\"), F.array(F.lit(\"\")))).cast(vertColSchema), \\\r\n    updateAfterAggMsgsExpr = vertexProgramUdf(F.col(\"vertCol\"), Pregel.msg())) \\\r\n    .sendMsgToDst(sendMsgToDstUdf(F.col(\"src.vertCol\"), Pregel.dst(\"vertCol\"))) \\\r\n    .aggMsgs(aggMsgsUdf(F.collect_list(Pregel.msg()))) \\\r\n    .setMaxIter(10) \\\r\n    .setCheckpointInterval(2) \\\r\n    .run()\r\n\r\n    merged_df = edges.join(result, edges.company_name == result.node)\r\n\r\n    final_df = merged_df.select(\"company_recid\", \"party_recId\", \"parentorganization\", \"company_dataarea\", \"parent_co_dataarea\", \"company\", \"company_name\", \"parent_company_name\", \"coregnum\", \"bank\", \"hierarchytypename\", \"vertCol.path\", \"vertCol.dist\")\r\n    final_df = final_df.withColumn(\"company_path\", concat(lit(\" -> \"), concat_ws(\" -> \", F.col(\"path\")))).drop(\"path\")\r\n    final_df = final_df.withColumn(\"company_path_level\", F.when(F.col(\"dist\") != float(\"inf\"), F.col(\"dist\").cast(\"integer\") + 1)).drop(\"dist\")\r\n    final_df = final_df.filter(\"company_path_level is not null\")\r\n\r\n    return final_df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {\"dbo.companyinfo\": \"\\\"dataverse_sanfordsit_cds2_workspace_unqf87dd056b3bf4075bf970702376af\\\".\\\"dbo\\\".\\\"companyinfo\\\"\", \"dbo.dirpartytable\": \"\\\"dataverse_sanfordsit_cds2_workspace_unqf87dd056b3bf4075bf970702376af\\\".\\\"dbo\\\".\\\"dirpartytable\\\"\", \"dbo.omhierarchyrelationship\": \"\\\"dataverse_sanfordsit_cds2_workspace_unqf87dd056b3bf4075bf970702376af\\\".\\\"dbo\\\".\\\"omhierarchyrelationship\\\"\", \"dbo.omhierarchytype\": \"\\\"dataverse_sanfordsit_cds2_workspace_unqf87dd056b3bf4075bf970702376af\\\".\\\"dbo\\\".\\\"omhierarchytype\\\"\"}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"dw_gold\"\n    schema = \"dbo\"\n    identifier = \"int_dim_d365_company\"\n    \n    def __repr__(self):\n        return '\"dw_gold\".\"dbo\".\"int_dim_d365_company\"'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "relation_name": "\"dw_gold\".\"dbo\".\"int_dim_d365_company\""}], "elapsed_time": 7.126324653625488, "args": {"log_level": "info", "indirect_selection": "eager", "quiet": false, "require_explicit_package_overrides_for_builtin_materializations": true, "require_resource_names_without_spaces": false, "send_anonymous_usage_stats": true, "vars": {}, "version_check": true, "log_format": "default", "populate_cache": true, "warn_error_options": {"include": [], "exclude": []}, "which": "run", "log_path": "D:\\code\\sandbt\\fabric_d365\\logs", "printer_width": 80, "use_colors_file": true, "partial_parse_file_diff": true, "project_dir": "D:\\code\\sandbt\\fabric_d365", "show_resource_report": false, "log_file_max_bytes": 10485760, "macro_debugging": false, "empty": false, "select": ["int_dim_d365_company"], "use_colors": true, "log_format_file": "debug", "write_json": true, "introspect": true, "profiles_dir": "C:\\Users\\etaboada\\.dbt", "partial_parse": true, "strict_mode": false, "enable_legacy_logger": false, "defer": false, "print": true, "invocation_command": "dbt run -s int_dim_d365_company", "static_parser": true, "source_freshness_run_project_hooks": false, "favor_state": false, "exclude": [], "cache_selected_only": false, "log_level_file": "debug"}}